/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.UUID;

import org.example.entities.Train;
import org.example.entities.User;
import org.example.services.UserBookingServices;
import org.example.utils.UserServiceUtil;

public class App {

    public static void main(String[] args) {
        System.out.println("Running Ticket Booking Application");
        Scanner scanner = new Scanner(System.in);
        int option = 0;
        UserBookingServices userBookingServices;
        try {
            userBookingServices = new UserBookingServices();
        } catch (IOException e) {
            System.out.println("Error initializing user services: " + e.getMessage());
            scanner.close();
            return;
        }
        Train trainSelectedForBooking = null;

        while (option != 7) {
            System.out.println("\n===== Ticket Booking Application =====");
            System.out.println("1. Sign Up");
            System.out.println("2. Login");
            System.out.println("3. Fetch Booking");
            System.out.println("4. Search Trains");
            System.out.println("5. Book Seats");
            System.out.println("6. Cancel Booking");
            System.out.println("7. Exit the Application");
            System.out.print("Select an option: ");
            option = scanner.nextInt();
            switch (option) {
                case 1:
                    System.out.println("Signup:--");
                    scanner.nextLine(); // Consume leftover newline
                    System.out.print("Enter Name: ");
                    String nameToSignUp = scanner.nextLine();

                    System.out.print("Enter Password: ");
                    String passwordToSignUp = scanner.nextLine();

                    User userToSignUp = new User(
                            nameToSignUp, passwordToSignUp,
                            UserServiceUtil.hashPassword(passwordToSignUp),
                            new ArrayList<>(),
                            UUID.randomUUID().toString());

                    userBookingServices.signUp(userToSignUp);
                    break;
                case 2:
                    // Login Up logic
                    System.out.println("Login:--");
                    scanner.nextLine(); // Consume leftover newline
                    System.out.print("Enter Name: ");
                    String nameToLogin = scanner.nextLine();
                    System.out.print("Enter Password: ");
                    String passwordToLogin = scanner.nextLine();

                    User userToLogin = new User(
                            nameToLogin, passwordToLogin,
                            null, // We don't need to hash here, just checking
                            new ArrayList<>(),
                            null); // We don't generate a new UUID for login
                    try {
                        userBookingServices = new UserBookingServices(userToLogin);
                        if (userBookingServices.loginUser()) {
                            System.out.println("Login Successful");
                        } else {
                            System.out.println("Invalid username or password");
                            userBookingServices = new UserBookingServices(); // Reset if login fails
                        }
                    } catch (IOException e) {
                        System.out.println("Error initializing user services: " + e.getMessage());
                        scanner.close();
                        return;
                    }
                    break;
                case 3:
                    // Fetch Booking logic
                    System.out.println("Fetching Bookings:--");
                    userBookingServices.fetchBooking();
                    break;
                case 4:
                    // Search Trains logic
                    System.out.println("Source Train Station");
                    scanner.nextLine(); // Consume newline
                    String source = scanner.nextLine();
                    System.out.println("Destination Train Station");
                    String destination = scanner.nextLine();

                    System.out.println("Searching for trains from " + source + " to " + destination + "...");
                    List<Train> trains = userBookingServices.getTrains(source, destination);

                    if (trains.isEmpty()) {
                        System.out.println("No trains found for the route " + source + " to " + destination);
                    } else {
                        System.out.println("Found " + trains.size() + " trains:");
                        for (int i = 0; i < trains.size(); i++) {
                            Train t = trains.get(i);
                            System.out.println((i + 1) + ". " + t.getTrainInfo());
                            System.out.println("   Stations: " + String.join(" -> ", t.getStations()));
                            for (Map.Entry<String, String> entry : t.getStationTime().entrySet()) {
                                System.out.println("   Station: " + entry.getKey() + ", Time: " + entry.getValue());
                            }
                        }
                        System.out.println("Select a train by typing 1,2,3... (0 to cancel)");
                        int selection = scanner.nextInt();
                        if (selection > 0 && selection <= trains.size()) {
                            trainSelectedForBooking = trains.get(selection - 1);
                            System.out.println("Selected train: " + trainSelectedForBooking.getTrainInfo());
                        } else {
                            System.out.println("Train selection canceled or invalid selection");
                        }
                    }
                    break;
                case 5:
                    // Book Seats logic
                    System.out.println("Booking Seats:--");

                    // Check if a train was selected
                    if (trainSelectedForBooking == null || trainSelectedForBooking.getTrainId() == null) {
                        System.out.println("No train selected. Please search and select a train first (option 4).");
                        break;
                    }

                    List<List<Integer>> seats = userBookingServices.fetchSeats(trainSelectedForBooking);
                    if (seats == null || seats.isEmpty()) {
                        System.out.println("No seats available for this train.");
                        break;
                    }

                    // Display seat map (0 = available, 1 = booked)
                    System.out.println("Seat Map (0 = available, 1 = booked):");
                    for (int i = 0; i < seats.size(); i++) {
                        System.out.print("Row " + i + ": ");
                        List<Integer> row = seats.get(i);
                        for (Integer val : row) {
                            System.out.print(val + " ");
                        }
                        System.out.println();
                    }

                    System.out.println("Select the seat by typing the row and column");
                    System.out.println("Enter the row (0-" + (seats.size() - 1) + "):");
                    int row = scanner.nextInt();
                    System.out.println("Enter the column (0-" + (seats.get(0).size() - 1) + "):");
                    int col = scanner.nextInt();

                    // Validate input
                    if (row < 0 || row >= seats.size() || col < 0 || col >= seats.get(0).size()) {
                        System.out.println("Invalid seat selection. Please try again.");
                        break;
                    }

                    // Check if seat is already booked
                    if (seats.get(row).get(col) == 1) {
                        System.out.println("This seat is already booked. Please select another seat.");
                        break;
                    }

                    System.out.println("Booking your seat....");
                    Boolean booked = userBookingServices.bookTrainSeat(trainSelectedForBooking, row, col);
                    if (booked.equals(Boolean.TRUE)) {
                        System.out.println("Booked! Enjoy your journey");
                        // Clear train selection after successful booking
                        trainSelectedForBooking = null;
                    } else {
                        System.out.println("Booking failed. Please try again.");
                    }
                    break;
                case 6:
                    System.out.println("Cancel a Ticket");
                    // First display the user's bookings
                    System.out.println("Your current bookings:");
                    userBookingServices.fetchBooking();

                    System.out.println("Enter the ticket id to cancel (or type 'back' to return):");
                    scanner.nextLine(); // Consume the newline
                    String ticketId = scanner.nextLine();

                    if (!ticketId.equalsIgnoreCase("back")) {
                        System.out.println("Cancelling ticket with ID: " + ticketId);
                        Boolean cancelled = userBookingServices.cancelBooking(ticketId);
                        if (cancelled) {
                            System.out.println("Ticket cancelled successfully");
                        } else {
                            System.out.println("Failed to cancel ticket. Please check the ticket ID.");
                        }
                    }
                    break;

                case 7:
                    System.out.println("Thank you for using Ticket Booking Application. Goodbye!");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
        scanner.close();
    }
}
